# Siege is similar to apache utils but helps better wih visualisation for demo of limiting request
# sudo apt-get install siege

# siege -v -r 2 -c 5 http://10.23.23.34/thumbs.png
# Option v - verbose logging
# r 2 (2 recursion/test)
# c 5 (with concurreny of 5)

# That is 2 set of 5 request i.e a total of 10 request in sets of 5


user www-data;

worker_processes auto;

events {
  worker_connections 1024;
}

http {

  include mime.types;

  limit_req_zone ($server_name,$binary_remote_addr,$request_uri <any one of these>) zone=MYZONE:10m rate=60r/m; #We can also add burst=5 nodelay as added in URI

  # if $server_name then this limits request coming to the ip of the machine(server)
  # $binary_remote_addr - limiting of request would be for each of the user(i.e per ip of the client)
  # $request_uri - Limits the number of request to uri i.e restricting the limit for each of the URI available

  # zone:MYZONE:10m - to allocate a zone in memory of 10MB
  # rate=60r/m - Which limits 60 req per minute and that too which is evenly distributed which is equivalent to 1r/s or 3600r/h

  server{

      listen 80;
      server_name 167.99.93.26;

      return 301 https://$host/$equest_uri;
      
  }


  server {

    listen 443 ssl http2;
    server_name 167.99.93.26;

    root home/eybcadmin/demo;

    index index.html index.php;

    ssl_certificate /etc/nginx/ssl/self.crt;
    ssl_certificate_key /etc/nginx/ssl/self.key; 

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    add_header Strict-Transport-Security "max-age=31536000" always; 

    ssl_session_cache shared:SSL:40m; 
    ssl_session_timeout 4h; 
    ssl_session_tickets on; 


    location / {
      limit_req zone=MYZONE burst=5 nodelay; # For the URLs where rate limiting is required set zone to MYZONE as defined above
      # burst=5 : it is basically the buffer in which if request exceeds 1r/second rather than gettin cancelled but stores extra 5 request which are served 1r/second 
      # nodelay : it is always used when there is a burst parametere added and it tells the server to also service the req in burst within the limit req rate i.e 1r/s + 5 burst req would be serices in the first second itself;
      # But then for next step(that is after the first 6 requests) it follows the req rate as precribed above i.e 1req/s
      try_files $uri $uri/ =404;
    }


    location ~\.php$ {
      # Pass php requests to the php-fpm service (fastcgi)
      include fastcgi.conf;
      fastcgi_pass unix:/run/php/php7.1-fpm.sock;
    }


  }
}